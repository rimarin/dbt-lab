package de.tuberlin.dima.minidb.parser;


/**
 * Class representing a token that is generated by the <code>SQLTokenizer</code>.
 * A token has a type (SELECT_CLAUSE, IDENTIFIER, ...) and an optional
 * string with the contents.
 * 
 * @author Stephan Ewen (stephan.ewen@tu-berlin.de)
 */
public class Token
{
	
	/**
	 * The type of the token, that indicates what keyword or markup
	 * character the token represents. 
	 */
	public enum TokenType
	{
		EMPTY("<empty>"),
		
		SELECT("SELECT"), FROM("FROM"), WHERE("WHERE"), GROUP("GROUP"),
		HAVING("HAVING"), ORDER("ORDER"), BY("BY"),
		
		INSERT("INSERT"), INTO("INTO"), UPDATE("UPDATE"), SET("SET"), DELETE("DELETE"), 
		
		PERIOD("."), COMMA(","), PARENTHESIS_OPEN("("), PARENTHESIS_CLOSE(")"),

		PLUS("+"), MINUS("-"), MUL("*"), DIV("/"),
		
		AS("AS"), AND("AND"), DESCENDING("DESC"), ASCENDING("ASC"), VALUES("VALUES"),
		
		AGG_COUNT("COUNT"), AGG_SUM("SUM"), AGG_AVG("AVG"),
		AGG_MIN("MIN"), AGG_MAX("MAX"),
		
		OPERAND_EQUAL("="), OPERAND_GREATER_THAN(">"), OPERAND_SMALLER_THAN("<"),
		OPERAND_UNEQUAL("<>"), OPERAND_SMALLER_EQUAL("<="), OPERAND_GREATER_EQUAL(">="),
		
		IDENTIFIER("<identifier>"), LITERAL("<literal>"),
		INTEGER_NUMBER("<integer number>"), REAL_NUMBER("<real number>"),
		
		END_OF_STATEMENT("<eof>");
		
		
		/**
		 * The representation of the token as a string for explanation.
		 */
		private String stringRepresentation;
		
		
		/**
		 * Create a new token type with a given string representation.
		 * 
		 * @param representation The string representation.
		 */
		private TokenType(String representation)
		{
			this.stringRepresentation = representation;
		}
		
		/**
		 * Gets the string representation.
		 * 
		 * @return The string representation.
		 */
		public String getStringRepresentation()
		{
			return this.stringRepresentation;
		}
	}
	
	
	/**
	 * The type of this token.
	 */
	protected TokenType type;
	
	/**
	 * The string holding the contents of this token.
	 */
	protected String tokenString;
	
	
	/**
	 * Creates a token with the given type and empty contents.
	 * 
	 * @param type The type for the token.
	 */
	public Token(TokenType type)
	{
		this.type = type;
		this.tokenString = type.name();
	}
	
	/**
	 * Creates a token with given type and contents.
	 * 
	 * @param type The type for the token.
	 * @param contents The string of the token.
	 */
	public Token(TokenType type, String contents)
	{
		this.type = type;
		this.tokenString = contents;
	}
	
	
	/**
	 * Returns the string of this token. If the token has no associated
	 * string, this returns the empty string.
	 * 
	 * @return The string of this token.
	 */
	public String getTokenString()
	{
		return this.tokenString;
	}
	
	/**
	 * Returns the type of this token.
	 * 
	 * @return This token's type.
	 */
	public TokenType getType()
	{
		return this.type;
	}
	
	/**
	 * Determines, if this token's type is an aggregation type.
	 *  
	 * @return true, if this token is an aggregation type.
	 */
	public boolean isAggregationType()
	{
		return this.type == TokenType.AGG_COUNT ||
		       this.type == TokenType.AGG_SUM   ||
		       this.type == TokenType.AGG_MIN   ||
		       this.type == TokenType.AGG_MAX   ||
		       this.type == TokenType.AGG_AVG;
	}
	
	/**
	 * Determines, if this token's type is an operator.
	 *  
	 * @return true, if this token is an operator type.
	 */
	public boolean isOperatorType()
	{
		return this.type == TokenType.OPERAND_EQUAL         ||
		       this.type == TokenType.OPERAND_GREATER_EQUAL ||
		       this.type == TokenType.OPERAND_GREATER_THAN  ||
		       this.type == TokenType.OPERAND_SMALLER_EQUAL ||
		       this.type == TokenType.OPERAND_SMALLER_THAN  ||
		       this.type == TokenType.OPERAND_UNEQUAL;
	}
	
	/**
	 * Determines, if this token's type is a numerical operator.
	 * 
	 * @return true, if this token is a numerical operator type.
	 */
	public boolean isNumericalOperatorType()
	{
		return this.type == TokenType.PLUS	||
			   this.type == TokenType.MINUS  ||
			   this.type == TokenType.MUL    ||
			   this.type == TokenType.DIV;
	}
	
	/**
	 * Returns a textual representation of the token.
	 * 
	 * @return The textual representation.
	 */
	@Override
	public String toString()
	{
		if (this.tokenString.length() > 0) {
			return "[" + this.type.name() + ": " + this.tokenString + "]";
		} else {
			return "[" + this.type.name() + "]";
		}
	}

}
